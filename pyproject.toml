[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "dune_client"
description = "A simple framework for interacting with Dune Analytics official API service."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache License Version 2.0"}
authors = [
    {name = "Benjamin H. Smith & Dune Analytics", email = "ben@cow.fi"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies = [
    "aiohttp~=3.10.0",
    "dataclasses-json~=0.6.4",
    "types-python-dateutil>=2.8.19.14",
    "types-PyYAML>=6.0.12.11",
    "types-requests>=2.28.0",
    "types-setuptools>=68.2.0.0",
    "python-dateutil~=2.8.2",
    "requests~=2.31.0",
    "ndjson~=0.3.1",
    "Deprecated~=1.2.14",
    "types-Deprecated>=1.2.9.3",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/duneanalytics/dune-client"
Repository = "https://github.com/duneanalytics/dune-client"
Issues = "https://github.com/duneanalytics/dune-client/issues"

[project.optional-dependencies]
dev = [
    "ruff>=0.13.0",
    "pandas>=1.0.0",
    "pandas-stubs>=1.0.0",
    "pytest>=7.4.1",
    "python-dotenv>=1.0.0",
    "mypy>=1.5.1",
    "aiounittest>=1.4.2",
    "colorlover>=0.3.0",
    "plotly>=5.9.0",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["dune_client"]

[dependency-groups]
dev = [
    "pyyaml>=6.0.2",
]

[tool.ruff]
# Increase the maximum line length to 100 characters.
line-length = 100
target-version = "py38"

[tool.ruff.lint]
# Enable a comprehensive set of rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "C4",     # flake8-comprehensions
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "PERF",   # perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

# Disable specific rules that might be too strict for this codebase
ignore = [
    "E501",   # Line too long (handled by formatter)
    "PLR",    # pylint refactor rules (can be overly strict)
    "PGH003", # Use specific rule codes when ignoring type issues
    "TRY003", # Avoid specifying long messages outside the exception class
    "ARG002", # Unused method argument (common in overrides)
    "PYI041", # Use float instead of int | float (we want explicit int | float for clarity)
    "PT011",  # pytest.raises should specify expected exception
    "SLF001", # Private member accessed (useful for testing)
]

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"
# Indent with spaces, rather than tabs.
indent-style = "space"
# Respect magic trailing commas.
skip-magic-trailing-comma = false
# Automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
# Import order: stdlib, third-party, first-party, local
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = ["dune_client"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and print statements
"tests/**/*.py" = ["PLR2004", "S101", "T201"]
# Type stubs can use unused imports
"*.pyi" = ["F401"]
